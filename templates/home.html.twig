{% extends 'base.html.twig' %}

{% block body %}
    <div id="shortener">
        <section>
            <div class="progress" v-if="progress > 0 & progress < 100">
                <div class="progress-bar bg-info progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </section>
        <section class="my-4">
            <h4 v-if="!shortUrl">Please, provide us a link you want to shorten:</h4>
            <div v-else>
                <div class="row align-items-center">
                    <div class="col-3 mr-auto">
                        <h4 class="text-success">Your short URL:</h4>
                    </div>
                    <div class="col-5 d-flex">
                        <input class="form-control" readonly id="short-url" v-model="shortUrl">
                        <button class="btn ml-1 clippy-btn" data-clipboard-target="#short-url"
                                data-trigger="focus" data-container="body" data-toggle="popover" data-placement="bottom" data-content="Copied to clipboard!">
                            <img class="clippy-img" src="assets/images/clippy.svg" alt="Copy to clipboard">
                        </button>
                    </div>
                </div>
            </div>
        </section>
        <hr>
        <form>
            <div class="form-group mb-5">
                <label for="long-url">Full URL</label>
                <input @focus="_cleanErrors()" v-model="formData.long_url" type="text" class="form-control" id="long-url" placeholder="Paste your link here">
                <div v-if="errors.long_url.length" class="text-danger">
                    <small v-for="error in errors.long_url" class="error p-1"><% error %></small>
                </div>
            </div>
            <div class="form-group mb-5">
                <label for="requested">Preferred short URL</label>
                <div class="d-flex align-items-center">
                    {#<span class="mr-1">{{ host }}/</span>#}
                    <input readonly value="{{ host }}/" type="text" class="form-control fake-input col-2" >
                    <input @focus="_cleanErrors()" v-model="formData.requested" v-mask="'{{ requestedUrlMask }}'" type="text" class="form-control" id="requested" placeholder="wHFRGug4g">
                </div>
                <div v-if="errors.requested.length" class="text-danger">
                    <small v-for="error in errors.requested" class="error p-1"><% error %></small>
                </div>
            </div>
            <button :disabled="locked" v-bind:class="{ disabled: locked }" @click.prevent="submit()" type="submit" class="btn btn-info">Submit</button>
        </form>
    </div>
{% endblock %}

{% block css %}
    <style>
        .fake-input:focus {
            border-color: #ced4da;
            box-shadow: none;
            cursor: default;
        }

        .container {
            flex-grow: 1;
        }
        #content {
            display: flex;
            flex-direction: column;
            flex-basis: 100%;
        }
        body {
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        .error {
            position: absolute;
        }
        .clippy-img {
            width: 13px;
        }

        .disabled {
            opacity: 0.1;
        }
    </style>
{% endblock %}

{% block js %}
    <script>
        Vue.directive('mask', VueMask.VueMaskDirective);

        new Vue({
            el: '#shortener',
            delimiters: ["<%","%>"],

            data: {
                errors: {
                    long_url: [],
                    requested: []
                },
                formData: {
                    long_url: "",
                    requested: ""
                },
                shortUrl: null,
                progress: 0,
                progressInterval: null,
                locked: false
            },

            computed: {

            },

            watch: {
                progress: function(val) {
                    $('.progress-bar').width(this.progress + '%');
                }
            },

            methods: {
                _startProgress: function() {
                    this.progress = 65;
                    this.locked = true;
                    var self = this;

                    this.progressInterval = setInterval(function() {
                        self.progress += 10;
                    }, 200);
                },

                _finishProgress: function() {
                    this.locked = false;
                    clearInterval(this.progressInterval);
                    this.progress = 100;
                },

                _initClipboard: function() {
                    $(function () {
                        $('[data-toggle="popover"]').popover();
                    });
                    new ClipboardJS('.clippy-btn');
                },

                _isValidUrl: function(value) {
                    // return /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(value);
                    return /[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/i.test(value);
                },

                reset: function() {
                    this.shortUrl = null;
                    this._cleanErrors();
                },

                _cleanErrors: function() {
                    this.errors.long_url = [];
                    this.errors.requested = [];
                },

                _removeHostMask: function(value) {
                    return value.replace("{{ host }}/", '');
                },

                _isFormValid: function () {
                    var valid = true;

                    if (!this._isValidUrl(this.formData.long_url)) {
                        this.errors.long_url.push('Not a valid URL');
                        valid = false;
                    }

                    return valid;
                },

                _getPostData: function() {
                    var data = {
                        long_url: this.formData.long_url
                    };

                    if (this.formData.requested)
                        data.requested = this.formData.requested;

                    return data;
                },

                submit: function() {
                    this._cleanErrors();
                    var self = this;

                    if (!this._isFormValid())
                        return;

                    this._startProgress();

                    axios.post("{{ path('shorten') }}", Qs.stringify(this._getPostData()))
                        .then(function (response) {
                            self.shortUrl = response.data.short_url;
                            self.progress = 100;
                            self._initClipboard();
                            self._finishProgress();
                        })
                        .catch(function (e) {
                            self._finishProgress();

                            e.response.data.violations.forEach(function(violation) {
                                switch (violation.propertyPath) {
                                    case '[long_url]':
                                        self.errors.long_url.push(violation.title);
                                        break;
                                    case '[requested]':
                                        self.errors.requested.push(violation.title);
                                        break;
                                }
                            });
                        });
                }
            }
        });
    </script>
{% endblock %}